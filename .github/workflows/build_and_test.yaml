# Build and install package and run tests
# First job builds the package and stores it as an artifact (version independent)
# Second job retrieves the artifact and installs it, then runs tests on different Python versions

name: Build test and install

on:
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Clean dist
        run: |
          rm -rf dist/

      - name: Build package
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build

      - name: Store build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: dist/
          retention-days: 1
          if-no-files-found: error

  test:
    needs: build
    runs-on: ubuntu-latest
    env:
      AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
      AZURE_DEVOPS_ORGANIZATION_URL: ${{ vars.AZURE_DEVOPS_ORGANIZATION_URL }}
      AZURE_DEVOPS_PROJECT_NAME: ${{ vars.AZURE_DEVOPS_PROJECT_NAME }}
      AZURE_DEVOPS_TEAM_NAME: ${{ vars.AZURE_DEVOPS_TEAM_NAME }}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Clean dist
        run: |
          rm -rf dist/

      - name: Retrieve wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist/

      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl

      - name: Test with pytest
        run: |
          python -m pip install pytest
          python -m pytest tests/ -m "not mutate"

  check:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Retrieve wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist/

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pkginfo

      - name: Extract version
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import sys
            from pathlib import Path
            from pkginfo import Wheel

            whl_files = list(Path('dist/').glob('*.whl'))
            whl_versions = [Wheel(str(whl)).version for whl in whl_files]

            if not len(set(whl_versions)) == 1:
                print('Error: All wheels must have the same version')
                sys.exit(1)

            with open('version.txt', 'w') as f:
                f.write(whl_versions[0])

      - name: Store version
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ env.VERSION }}

      - name: Check if tag exists
        run: exit 1
        if: steps.check-tag.outputs.exists == 'true'
